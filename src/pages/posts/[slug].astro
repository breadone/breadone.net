---
import PageLayout from "@/layouts/Base";
import { getFormattedDate } from "@/utils";
import Pocketbase from "pocketbase";

export const prerender = false

const pb = new Pocketbase(import.meta.env.PUBLIC_PB_URL)

const posts = await pb.collection('posts').getFullList()


// find page in pages
const { slug } = Astro.params;

const page = posts.find((page) => page['slug'] === slug);
if (!page) return Astro.redirect("/404");
const { title, content, publishDate, description } = page

function calcReadTime(wordCount) {
	let d = new Date()
    // avg reading rate of 184 wpm
	d.setMinutes(wordCount/184);
	if (d.getMinutes() == 0) {
		return "< 1";
	} else {
		return d.getMinutes().toLocaleString();
	}
}

const wordCount = content.split(' ').length;
const readTime = calcReadTime(wordCount);
const formattedPublishDate = getFormattedDate(publishDate, { month: "long" });

const meta = {
	title: "posts",
	description: page.title,
    ogImage: pb.files.getUrl(page, page.headerImage)
};
---

<PageLayout meta={meta}>
    <article class="flex-grow break-words">
        <div id="blog-hero">
            <img src={ pb.files.getUrl(page, page.headerImage) } width="550" class="my-2"/>
            <h1 style="max-width: 40ch;" class="title mb-3 mt-5 ">{title}</h1>
            <time datetime={publishDate}>{formattedPublishDate}</time> | 
            {readTime} min. read
            {
                !!page.tags.length && (
                    <div class="mt-1 sm:mt-0 sm:inline sm:before:mr-2 sm:before:content-['|']">
                        <svg
                            aria-hidden="true"
                            focusable="false"
                            xmlns="http://www.w3.org/2000/svg"
                            class="mr-1 inline-block h-6 w-6"
                            viewBox="0 0 24 24"
                            stroke-width="1.5"
                            stroke="currentColor"
                            fill="none"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                        >
                            <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                            <path d="M7.859 6h-2.834a2.025 2.025 0 0 0 -2.025 2.025v2.834c0 .537 .213 1.052 .593 1.432l6.116 6.116a2.025 2.025 0 0 0 2.864 0l2.834 -2.834a2.025 2.025 0 0 0 0 -2.864l-6.117 -6.116a2.025 2.025 0 0 0 -1.431 -.593z" />
                            <path d="M17.573 18.407l2.834 -2.834a2.025 2.025 0 0 0 0 -2.864l-7.117 -7.116" />
                            <path d="M6 9h-.01" />
                        </svg>
                        {page.tags.map((tag, i) => (
                            <>
                                <a
                                    class="cactus-link inline-block before:content-['#']"
                                    href={`/posts/tag/${tag}/`}
                                >
                                    {tag}
                                </a>
                                {i < page.tags.length - 1 && ", "}
                            </>
                        ))}
                    </div>
                )
            }
            <p class="mt-4 italic font-bold">{description}</p>
        </div>
        <div
            class="prose prose-sm prose-cactus mt-8 prose-headings:font-semibold prose-headings:before:absolute prose-headings:before:-ms-4 prose-headings:before:text-accent prose-headings:before:content-['#'] prose-th:before:content-none"
        >
            <Fragment set:html={content} />
        </div>
    </article>
</PageLayout>